# -*- coding: utf-8 -*-
"""Cognify Level 1 (Task1)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x89L5SM-jV-nJi92NIOZU4L69UtnpBVx

Level 1 (task1)- : Determine the top three most common cuisines in the dataset ,calculate the percentage of restuarents that serve each of the top cuisines
"""

import pandas as pd
data = {
    'restaurant_name': ['Black Horse', 'Curry Nights', 'Bobina', 'The Terai', 'Sharda Dinings'],
    'cuisine': ['Italian', 'Mexican', 'Italian', 'Chinese', 'Mexican']
}
df = pd.DataFrame(data)
cuisine_counts = df['cuisine'].value_counts()
top_cuisines = cuisine_counts.head(3)
total_restaurants = len(df)
top_cuisines_percentage = (top_cuisines / total_restaurants) * 100
print("Top 3 Cuisines and Their Percentages:")
for cuisine, count in top_cuisines.items():
    percentage = top_cuisines_percentage[cuisine]
    print(f"{cuisine}: {count} restaurants ({percentage:.2f}%)")

"""Level 1 (Task2)-:Identify the city with the highest number of restaurants in the dataset

Calculate the average rating for restaurants in each city

Determine the city with highest average rating
"""

import pandas as pd
data = {
    'restaurant_name': ['Restaurant1', 'Restaurant2', 'Restaurant3', 'Restaurant4', 'Restaurant5', 'Restaurant6'],
    'city': ['Gorakhpur', 'Luckhnow', 'New Delhi', 'Kanpur', 'Agra', 'Mumbai'],
    'rating': [4.8, 4.2, 3.8, 4.7, 4.1, 4.3]
}
df = pd.DataFrame(data)
city_counts = df['city'].value_counts()
city_with_most_restaurants = city_counts.idxmax()
most_restaurants_count = city_counts.max()
city_avg_ratings = df.groupby('city')['rating'].mean()
city_with_highest_avg_rating = city_avg_ratings.idxmax()
highest_avg_rating = city_avg_ratings.max()
print(f"City with the highest number of restaurants: {city_with_most_restaurants} ({most_restaurants_count} restaurants)")
print("\nAverage ratings for each city:")
print(city_avg_ratings)

print(f"\nCity with the highest average rating: {city_with_highest_avg_rating} (Average Rating: {highest_avg_rating:.2f})")

"""Level 3 (Task3)-:Create a histogram or bar chart to visualize the distribution of price ranges among the restaurants

Calculate the percentage of restaurants in each price range category
"""

import pandas as pd
import matplotlib.pyplot as plt
data = {
    'restaurant_name': ['Restaurant1', 'Restaurant2', 'Restaurant3', 'Restaurant4', 'Restaurant5', 'Restaurant6'],
    'price_range': [1, 2, 3, 2, 4, 1]
}
df = pd.DataFrame(data)
price_range_counts = df['price_range'].value_counts().sort_index()
plt.figure(figsize=(8, 5))
price_range_counts.plot(kind='bar', color='Red')
plt.title('Distribution of Price Ranges Among Restaurants')
plt.xlabel('Price Range')
plt.ylabel('Number of Restaurants')
plt.xticks(rotation=0)
plt.show()
total_restaurants = len(df)
price_range_percentage = (price_range_counts / total_restaurants) * 100
print("Percentage of restaurants in each price range:")
for price_range, percentage in price_range_percentage.items():
    print(f"Price Range {price_range}: {percentage:.2f}%")

"""Level 1 (Task4)-: Determine the percentage of restaurants that offer the online delivery

Campare the average ratings of restaurants with and without online delivery
"""

import pandas as pd
data = {
    'restaurant_name': ['Restaurant1', 'Restaurant2', 'Restaurant3', 'Restaurant4', 'Restaurant5', 'Restaurant6'],
    'online_delivery': [True, False, True, True, False, False],
    'rating': [4.5, 4.2, 3.8, 4.7, 4.1, 3.9]
}
df = pd.DataFrame(data)
total_restaurants = len(df)
restaurants_with_delivery = df['online_delivery'].sum()
percentage_with_delivery = (restaurants_with_delivery / total_restaurants)
avg_rating_with_delivery = df[df['online_delivery'] == True]['rating'].mean()
avg_rating_without_delivery = df[df['online_delivery'] == False]['rating'].mean()
print(f"Percentage of restaurants that offer online delivery: {percentage_with_delivery:.2f}%")
print(f"Average rating for restaurants with online delivery: {avg_rating_with_delivery:.2f}")
print(f"Average rating for restaurants without online delivery: {avg_rating_without_delivery:.2f}")